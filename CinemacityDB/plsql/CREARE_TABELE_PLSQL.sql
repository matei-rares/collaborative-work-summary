-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2024-05-28 18:56:08 EEST
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE bilet (
    id_bilet      NUMBER(5) NOT NULL,
    id_film       NUMBER(3) NOT NULL,
    id_sala       NUMBER(2) NOT NULL,
    id_client     NUMBER(4) NOT NULL,
    id_tip        NUMBER(1) NOT NULL,
    id_combinatie NUMBER NOT NULL,
    pret          NUMBER(2) NOT NULL,
    nr_loc        NUMBER(2) NOT NULL,
    nr_rand       NUMBER(2) NOT NULL
);

ALTER TABLE bilet ADD CHECK ( pret BETWEEN 0 AND 50 );

ALTER TABLE bilet ADD CHECK ( nr_loc BETWEEN 1 AND 20 );

ALTER TABLE bilet ADD CONSTRAINT bilet_pk PRIMARY KEY ( id_bilet );

ALTER TABLE bilet
    ADD CONSTRAINT comb_loc_rand UNIQUE ( id_combinatie,
                                          nr_loc,
                                          nr_rand );

CREATE TABLE client (
    id_client NUMBER(4) NOT NULL,
    varsta    NUMBER(3) NOT NULL,
    statut    VARCHAR2(10) NOT NULL
);

ALTER TABLE client ADD CHECK ( varsta > 0 );

ALTER TABLE client ADD CONSTRAINT client_pk PRIMARY KEY ( id_client );

CREATE TABLE combinatie (
    id_combinatie    NUMBER NOT NULL,
    id_film          NUMBER(2) NOT NULL,
    id_sala          NUMBER(2) NOT NULL,
    data_ora_film    DATE NOT NULL,
    nr_locuri_libere NUMBER(3) NOT NULL
);

ALTER TABLE combinatie
    ADD CONSTRAINT combinatie_pk PRIMARY KEY ( id_film,
                                               id_sala,
                                               id_combinatie );

ALTER TABLE combinatie
    ADD CONSTRAINT sala_data_ora_film UNIQUE ( id_sala,
                                               data_ora_film,
                                               id_film );

CREATE TABLE detalii (
    id_film      NUMBER(2) NOT NULL,
    id_gen       NUMBER(3) NOT NULL,
    nota_film    NUMBER(4, 2),
    nr_de_minute NUMBER(3)
);

ALTER TABLE detalii ADD CHECK ( nota_film <= 10 );

CREATE UNIQUE INDEX detalii__idx ON
    detalii (
        id_film
    ASC );

ALTER TABLE detalii ADD CONSTRAINT detalii_id_gen_id_film_un UNIQUE ( id_gen,
                                                                      id_film );

CREATE TABLE film (
    id_film      NUMBER(2) NOT NULL,
    nume_film    VARCHAR2(50) NOT NULL,
    data_lansare DATE NOT NULL
);

ALTER TABLE film ADD CHECK ( data_lansare >= '1-JAN-1922' );

ALTER TABLE film ADD CONSTRAINT film_pk PRIMARY KEY ( id_film );

ALTER TABLE film ADD CONSTRAINT film_nume_film_data_lansare_un UNIQUE ( nume_film,
                                                                        data_lansare );

CREATE TABLE gen (
    id_gen   NUMBER(3) NOT NULL,
    nume_gen VARCHAR2(10) NOT NULL
);

ALTER TABLE gen ADD CHECK ( REGEXP_LIKE ( nume_gen,
                                          '^[a-zA-Z]*$' ) );

ALTER TABLE gen ADD CONSTRAINT gen_pk PRIMARY KEY ( id_gen );

ALTER TABLE gen ADD CONSTRAINT gen_nume_gen_un UNIQUE ( nume_gen );

CREATE TABLE sala (
    id_sala          NUMBER(2) NOT NULL,
    nr_locuri_totale NUMBER(3) NOT NULL,
    randuri          NUMBER(2) NOT NULL
);

ALTER TABLE sala ADD CONSTRAINT sala_pk PRIMARY KEY ( id_sala );

CREATE TABLE tip (
    id_tip   NUMBER(1) NOT NULL,
    nume_tip VARCHAR2(10) NOT NULL,
    reducere NUMBER(2) NOT NULL
);

ALTER TABLE tip ADD CHECK ( reducere >= 0 );

ALTER TABLE tip ADD CONSTRAINT tip_pk PRIMARY KEY ( id_tip );

ALTER TABLE bilet
    ADD CONSTRAINT bilet_client_fk FOREIGN KEY ( id_client )
        REFERENCES client ( id_client );

ALTER TABLE bilet
    ADD CONSTRAINT bilet_combinatie_fk FOREIGN KEY ( id_film,
                                                     id_sala,
                                                     id_combinatie )
        REFERENCES combinatie ( id_film,
                                id_sala,
                                id_combinatie );

ALTER TABLE bilet
    ADD CONSTRAINT bilet_tip_fk FOREIGN KEY ( id_tip )
        REFERENCES tip ( id_tip );

ALTER TABLE combinatie
    ADD CONSTRAINT combinatie_film_fk FOREIGN KEY ( id_film )
        REFERENCES film ( id_film );

ALTER TABLE combinatie
    ADD CONSTRAINT combinatie_sala_fk FOREIGN KEY ( id_sala )
        REFERENCES sala ( id_sala );

ALTER TABLE detalii
    ADD CONSTRAINT detalii_film_fk FOREIGN KEY ( id_film )
        REFERENCES film ( id_film );

ALTER TABLE detalii
    ADD CONSTRAINT detalii_gen_fk FOREIGN KEY ( id_gen )
        REFERENCES gen ( id_gen );

CREATE SEQUENCE bilet_id_bilet_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER bilet_id_bilet_trg BEFORE
    INSERT ON bilet
    FOR EACH ROW
    WHEN ( new.id_bilet IS NULL )
BEGIN
    :new.id_bilet := bilet_id_bilet_seq.nextval;
END;
/

CREATE SEQUENCE client_id_client_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER client_id_client_trg BEFORE
    INSERT ON client
    FOR EACH ROW
    WHEN ( new.id_client IS NULL )
BEGIN
    :new.id_client := client_id_client_seq.nextval;
END;
/

CREATE SEQUENCE combinatie_id_combinatie_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER combinatie_id_combinatie_trg BEFORE
    INSERT ON combinatie
    FOR EACH ROW
    WHEN ( new.id_combinatie IS NULL )
BEGIN
    :new.id_combinatie := combinatie_id_combinatie_seq.nextval;
END;
/

CREATE SEQUENCE film_id_film_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER film_id_film_trg BEFORE
    INSERT ON film
    FOR EACH ROW
    WHEN ( new.id_film IS NULL )
BEGIN
    :new.id_film := film_id_film_seq.nextval;
END;
/

CREATE SEQUENCE gen_id_gen_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER gen_id_gen_trg BEFORE
    INSERT ON gen
    FOR EACH ROW
    WHEN ( new.id_gen IS NULL )
BEGIN
    :new.id_gen := gen_id_gen_seq.nextval;
END;
/

CREATE SEQUENCE sala_id_sala_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER sala_id_sala_trg BEFORE
    INSERT ON sala
    FOR EACH ROW
    WHEN ( new.id_sala IS NULL )
BEGIN
    :new.id_sala := sala_id_sala_seq.nextval;
END;
/

CREATE SEQUENCE tip_id_tip_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tip_id_tip_trg BEFORE
    INSERT ON tip
    FOR EACH ROW
    WHEN ( new.id_tip IS NULL )
BEGIN
    :new.id_tip := tip_id_tip_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                             1
-- ALTER TABLE                             26
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           7
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          7
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0

-------------------------------------------------------------PROCEDURI------------------------------------
CREATE OR REPLACE PROCEDURE view_program IS
    v_nume film.nume_film%type;
    v_data combinatie.data_ora_film%type;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Film           ' || '    Data si ora' ||'         Sala  ' ||'        Id combinatie');
    FOR rec IN (SELECT * FROM combinatie) LOOP
        select nume_film into v_nume from film where id_film = rec.id_film;
        DBMS_OUTPUT.PUT_LINE( v_nume||'     ' ||rec.data_ora_film ||'           '||rec.id_sala||'        ' || rec.id_combinatie);
    END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE add_bilet(
    p_id_combinatie IN NUMBER,
    p_id_client IN NUMBER,
    p_nr_loc IN NUMBER,
    p_nr_rand IN NUMBER
) IS
    v_id_film NUMBER;
    v_id_sala NUMBER;
    v_statut VARCHAR2(10);
    v_id_tip NUMBER;
    v_pret NUMBER;
    v_loc_lib NUMBER;
BEGIN
    SAVEPOINT savepoint_start;

    -- film ID si sala ID, locuri libere , statutul clientului
    SELECT id_film, id_sala, nr_locuri_libere INTO v_id_film, v_id_sala, v_loc_lib
    FROM combinatie WHERE id_combinatie = p_id_combinatie;
    
    SELECT statut INTO v_statut FROM client WHERE id_client = p_id_client;

    -- reducere si tipul
    SELECT reducere,id_tip INTO v_pret,v_id_tip FROM tip WHERE nume_tip = v_statut;
    v_pret := 50 - v_pret;

    -- inserare si update
    INSERT INTO bilet (id_film, id_sala, id_client, id_tip, id_combinatie, pret, nr_loc, nr_rand)
    VALUES (v_id_film, v_id_sala, p_id_client, v_id_tip, p_id_combinatie, v_pret, p_nr_loc, p_nr_rand);
    
      -- locuri libere pt programare
    v_loc_lib := v_loc_lib - 1;
    update combinatie  set nr_locuri_libere = v_loc_lib  where id_combinatie= p_id_combinatie;
    DBMS_OUTPUT.PUT_LINE('Insert bilet la combinatia '||p_id_combinatie || ' cu client '|| p_id_client);
    
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK TO SAVEPOINT savepoint_start;
        DBMS_OUTPUT.PUT_LINE('rollback la bilet: '||SQLERRM);

END;
/


--------------------------------------------------------TRIGGERE SIMPLE------------------------------------
CREATE OR REPLACE TRIGGER check_tip_values
BEFORE INSERT ON tip
FOR EACH ROW
DECLARE
    v_tip_name VARCHAR2(10);
BEGIN
    v_tip_name := :NEW.nume_tip;

    IF v_tip_name NOT IN ('adult', 'copil', 'pensionar', 'student', 'elev') THEN
        RAISE_APPLICATION_ERROR(-20001, 'Numele tipului trebuie sa fie: adult, copil, pensionar, student, elev');
    END IF;

    IF :NEW.reducere < 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Reducere cannot be negative.');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER check_client_values
BEFORE INSERT ON client
FOR EACH ROW
DECLARE
    varsta NUMBER;
BEGIN
    varsta := :NEW.varsta;
    if varsta > 65 and :NEW.statut not like 'pensionar' then
        RAISE_APPLICATION_ERROR(-20001, 'Clientul e pensionar');
    elsif  varsta <= 12 and :NEW.statut not like 'copil' then
        RAISE_APPLICATION_ERROR(-20001, 'Clientul e copil');
    end if;
END;
/

------------------------------------------------------COMBINATIE_LOG (mutating table)--------------------------
CREATE TABLE combinatie_log AS
SELECT * FROM combinatie WHERE 1=0;
/

CREATE OR REPLACE TRIGGER log_combinatie_insert
AFTER INSERT ON combinatie
FOR EACH ROW
BEGIN
    INSERT INTO combinatie_log (id_combinatie, id_film, id_sala, data_ora_film, nr_locuri_libere)
    VALUES (:NEW.id_combinatie, :NEW.id_film, :NEW.id_sala, :NEW.data_ora_film, :NEW.nr_locuri_libere);
END;
/

CREATE OR REPLACE TRIGGER log_combinatie_update
AFTER UPDATE ON combinatie
FOR EACH ROW
BEGIN
    UPDATE combinatie_log
    SET id_film = :NEW.id_film,
        id_sala = :NEW.id_sala,
        data_ora_film = :NEW.data_ora_film,
        nr_locuri_libere = :NEW.nr_locuri_libere
    WHERE id_combinatie = :OLD.id_combinatie;
END;
/
CREATE OR REPLACE TRIGGER log_combinatie_delete
AFTER DELETE ON combinatie
FOR EACH ROW
BEGIN
    DELETE FROM combinatie_log
    WHERE id_combinatie = :OLD.id_combinatie;
END;
/

----------------------------------------------------------COMBINATIE/PROGRAMARI------------------------------------------
CREATE OR REPLACE TRIGGER check_combinatie_schedule
BEFORE INSERt or update ON combinatie
FOR EACH ROW
DECLARE
    id_type NUMBER;
    v_start_time DATE;
    v_end_time DATE;
    v_minutes NUMBER;
    v_count NUMBER;
    date1 DATE;
BEGIN


    select nr_de_minute into v_minutes from detalii d where d.id_film = :NEW.id_film;
    v_start_time := :NEW.data_ora_film;
    v_end_time := v_start_time + NUMTODSINTERVAL(v_minutes, 'minute');
    
    
    --verifica daca filmul a aparut
     select data_lansare into date1 from film f where :NEW.id_film=f.id_film;
    if :NEW.data_ora_film < date1 then
      RAISE_APPLICATION_ERROR(-20002, 'Filmul nu a aparut inca la data programata');
    end if;
    
    -- Vezi daca alt film are acea data
    if inserting then
        for i in (select * from combinatie_log c where c.id_sala = :new.id_sala) loop     
        -- pt fiecare combinatie iau nr de min 
            select nr_de_minute into v_minutes from detalii d where d.id_film = i.id_film;
    
            if (v_end_time between i.data_ora_film and i.data_ora_film + NUMTODSINTERVAL(v_minutes, 'minute')) or (v_start_time between  i.data_ora_film and i.data_ora_film + NUMTODSINTERVAL(v_minutes, 'minute')) then
            
                RAISE_APPLICATION_ERROR(-20001, 'Alt film are programata acea data');
    
            end if;
        end loop;
    elsif updating then     
        for i in (select * from combinatie_log c where c.id_sala = :new.id_sala and c.id_combinatie != :new.id_combinatie) loop     
        -- pt fiecare combinatie iau nr de min 
            select nr_de_minute into v_minutes from detalii d where d.id_film = i.id_film;
    
            if (v_end_time between i.data_ora_film and i.data_ora_film + NUMTODSINTERVAL(v_minutes, 'minute')) or (v_start_time between  i.data_ora_film and i.data_ora_film + NUMTODSINTERVAL(v_minutes, 'minute')) then
            
                RAISE_APPLICATION_ERROR(-20001, 'Alt film are programata acea data');
    
            end if;
        end loop;
   end if;
    
    
    
END;
/
----------------------------------------------------------------TRANZACTIE---------------------------------------------------------
--------trigger pe combinatie cand se cumpara bilet
CREATE OR REPLACE TRIGGER check_combinatie_locuri
BEFORE UPDATE ON combinatie
FOR EACH ROW
DECLARE
BEGIN
    if :NEW.nr_locuri_libere <0 then
            RAISE_APPLICATION_ERROR(-20002, 'Nu mai sunt locuri la aceasta programare!');
    end if;
end;
/
--trigger pe bilet cand se cumpara bilet
CREATE OR REPLACE TRIGGER check_bilet
BEFORE INSERT or update ON bilet
FOR EACH ROW
DECLARE
    id_type NUMBER;
    v_randuri NUMBER;
    v_loc_tot NUMBER;
    locuri_lib NUMBER;
    nume_status VARCHAR2(10);
    v_tip_nume VARCHAR2(10);
BEGIN
    
     --check locuri libere
    select nr_locuri_libere into locuri_lib from combinatie c where c.id_combinatie= :NEW.id_combinatie;
    if locuri_lib<=0 then
        RAISE_APPLICATION_ERROR(-20001, 'Nu mai sunt locuri la programarea asta');
    end if;
    
    --check film daca merge cu combinatia
    select id_film into id_type from film f where f.id_film = :NEW.id_film;
    if :NEW.id_film != id_type then
        RAISE_APPLICATION_ERROR(-20001, 'Filmul nu corespunde cu combinatia');
    end if;
    
    --check sala daca merge cu combinatia
    select id_sala into id_type from sala s where s.id_sala = :NEW.id_sala;
    if :NEW.id_sala != id_type then
        RAISE_APPLICATION_ERROR(-20001, 'Sala nu corespunde cu combinatia');
    end if;
    
    --check daca clientul corespunde cu tipul
    select statut into nume_status from client c where c.id_client = :NEW.id_client;
    select nume_tip into v_tip_nume from tip t where t.id_tip = :NEW.id_tip;
    if nume_status not like v_tip_nume then
        RAISE_APPLICATION_ERROR(-20001, 'Tipul biletului nu corespunde cu statusul clientului');
    end if;
    
    --check rand
    select randuri,nr_locuri_totale into v_randuri,v_loc_tot from sala s where s.id_sala= :NEW.id_sala;
    if :NEW.nr_rand <=0 or :NEW.nr_rand >= v_randuri then
        RAISE_APPLICATION_ERROR(-20001, 'Rand invalid pentru aceasta sala');
    end if;
    
    
    --check loc
    if :NEW.nr_loc  <=0 or :NEW.nr_loc >=  v_loc_tot/v_randuri then
        RAISE_APPLICATION_ERROR(-20001, 'Loc invalid pentru aceasta sala');
    end if;
    
    
END;
/

------------------------------------------------------------PACHET STERGERE------------------------------------------------------

create or replace package deletes as
procedure delete_all;
procedure clear_tables;
end deletes;
/
create or replace package body deletes is

PROCEDURE clear_tables IS
BEGIN
    DELETE FROM bilet;
    DELETE FROM client;
    DELETE FROM combinatie;
    DELETE FROM detalii;
    DELETE FROM sala;
    DELETE FROM film;
    DELETE FROM tip;
    DELETE FROM gen;
    DELETE FROM combinatie_log;
end;


PROCEDURE delete_all IS
BEGIN
    -- Delete content
    clear_tables;

    -- Drop tables
    EXECUTE IMMEDIATE 'DROP TABLE bilet CASCADE CONSTRAINTS PURGE';
    EXECUTE IMMEDIATE 'DROP TABLE combinatie CASCADE CONSTRAINTS PURGE';
    EXECUTE IMMEDIATE 'DROP TABLE client CASCADE CONSTRAINTS PURGE';
    EXECUTE IMMEDIATE 'DROP TABLE detalii CASCADE CONSTRAINTS PURGE';
    EXECUTE IMMEDIATE 'DROP TABLE film CASCADE CONSTRAINTS PURGE';
    EXECUTE IMMEDIATE 'DROP TABLE sala CASCADE CONSTRAINTS PURGE';
    EXECUTE IMMEDIATE 'DROP TABLE tip CASCADE CONSTRAINTS PURGE';
    EXECUTE IMMEDIATE 'DROP TABLE gen CASCADE CONSTRAINTS PURGE';
    EXECUTE IMMEDIATE 'DROP TABLE combinatie_log CASCADE CONSTRAINTS PURGE';

    -- Drop sequences
    EXECUTE IMMEDIATE 'DROP SEQUENCE bilet_id_bilet_seq';
    EXECUTE IMMEDIATE 'DROP SEQUENCE client_id_client_seq';
    EXECUTE IMMEDIATE 'DROP SEQUENCE combinatie_id_combinatie_seq';
    EXECUTE IMMEDIATE 'DROP SEQUENCE film_id_film_seq';
    EXECUTE IMMEDIATE 'DROP SEQUENCE sala_id_sala_seq';
    EXECUTE IMMEDIATE 'DROP SEQUENCE gen_id_gen_seq';
    EXECUTE IMMEDIATE 'DROP SEQUENCE tip_id_tip_seq';

    DBMS_OUTPUT.PUT_LINE('Stergere totala ok');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

END deletes;

/
------------------------------------------------------------PACHET inserts----------------------------------------------
create or replace package inserts as
procedure insert_genuri;
procedure insert_film_cu_detalii(
    p_nume_film IN VARCHAR2,
    p_data_lansare IN DATE,
    p_nume_gen IN VARCHAR2,
    p_nota_film IN NUMBER,
    p_nr_minute IN NUMBER
);
procedure insert_filme;
procedure insert_sali;
procedure insert_tipuri;
procedure insert_clienti;
procedure insert_combinatie(
    p_id_film IN NUMBER,
    p_id_sala IN NUMBER,
    p_data_ora_film IN DATE
);
procedure insert_combinatii;

end inserts;
/
create or replace package body inserts is

-------------------------------------------------------------GENURI----------------------------------------------------------
PROCEDURE insert_genuri IS
BEGIN
    --INSERT INTO employees (emp_id, emp_name, emp_salary) VALUES (p_emp_id, p_emp_name, p_emp_salary);
    delete from detalii;
    delete  from gen;
    insert into gen(nume_gen) values('actiune');
insert into gen(nume_gen) values('dragoste');
insert into gen(nume_gen) values('horror');
insert into gen(nume_gen) values('comedie');
insert into gen(nume_gen) values('thriler');
insert into gen(nume_gen) values('mister');
    DBMS_OUTPUT.PUT_LINE('Insert genuri ok');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Eoare la insert genuri: ' || SQLERRM);
END;



-------------------------------------------------------------FILM----------------------------------------------------------
PROCEDURE insert_film_cu_detalii(
    p_nume_film IN VARCHAR2,
    p_data_lansare IN DATE,
    p_nume_gen IN VARCHAR2,
    p_nota_film IN NUMBER,
    p_nr_minute IN NUMBER
) IS
    v_id_film NUMBER;
    v_id_gen NUMBER;
    check_gen NUMBER;
BEGIN
    --get gen
    select count(*) into check_gen from gen where nume_gen=p_nume_gen;
    if check_gen <1 then
        RAISE_APPLICATION_ERROR(-20001, 'Acest gen nu exista in genurile curente');
    end if;
    
    SELECT id_gen INTO v_id_gen
    FROM gen
    WHERE nume_gen = p_nume_gen;
    
    
    --insert film
    INSERT INTO film (nume_film, data_lansare)
    VALUES (p_nume_film, p_data_lansare)
    RETURNING id_film INTO v_id_film;
    
    --insert detalii
    INSERT INTO detalii (id_film, nota_film, id_gen, nr_de_minute)
    VALUES (v_id_film, p_nota_film, v_id_gen, p_nr_minute);

    DBMS_OUTPUT.PUT_LINE('Insert film '|| p_nume_film);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error insert film: ' || SQLERRM);
END;



-------------------------------------------------------------FILME----------------------------------------------------------
procedure insert_filme is
begin 
    delete from detalii;
    delete from bilet;
    delete from combinatie;
    delete from film;
    insert_film_cu_detalii('Fast 9', TO_DATE('20-DEC-2005', 'DD-MON-YYYY'), 'actiune', 6.6, 120);
    insert_film_cu_detalii('Batman', TO_DATE('02-DEC-1975', 'DD-MON-YYYY'), 'actiune', 7.6, 150);
    insert_film_cu_detalii('Batman', TO_DATE('20-APR-2008', 'DD-MON-YYYY'), 'actiune', 8.7, 150);
    insert_film_cu_detalii('The Notebook', TO_DATE('02-DEC-2015', 'DD-MON-YYYY'), 'dragoste', 9.3, 180);
    insert_film_cu_detalii('James Bond: Absolution', TO_DATE('18-JAN-2018', 'DD-MON-YYYY'), 'actiune', 6.8, 200);
    insert_film_cu_detalii('My own life', TO_DATE('23-FEB-2001', 'DD-MON-YYYY'), 'horror', 9.9, 120);

    DBMS_OUTPUT.PUT_LINE('Filme inserate');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Eroare inserare filme: ' || SQLERRM);
END;

-------------------------------------------------------------SALI----------------------------------------------------------
PROCEDURE insert_sali IS
BEGIN
    DELETE FROM sala;

    INSERT INTO sala (id_sala, nr_locuri_totale, randuri) VALUES (1, 200, 10);
    INSERT INTO sala (id_sala, nr_locuri_totale, randuri) VALUES (2, 250, 15);
    INSERT INTO sala (id_sala, nr_locuri_totale, randuri) VALUES (3, 150, 10);
    INSERT INTO sala (id_sala, nr_locuri_totale, randuri) VALUES (4, 100, 15);
    INSERT INTO sala (id_sala, nr_locuri_totale, randuri) VALUES (5, 50, 5);
    INSERT INTO sala (id_sala, nr_locuri_totale, randuri) VALUES (6, 200, 15);

    DBMS_OUTPUT.PUT_LINE('Insert sali ok');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Eoare la insert sali: ' || SQLERRM);
END;


-------------------------------------------------------------TIPURI----------------------------------------------------------
PROCEDURE insert_tipuri IS
BEGIN
    DELETE FROM tip;

    insert into tip(id_tip,nume_tip,reducere) values(1,'adult',0);
insert into tip(id_tip,nume_tip,reducere) values(2,'copil',10);
insert into tip(id_tip,nume_tip,reducere) values(3,'pensionar',5);
insert into tip(id_tip,nume_tip,reducere) values(4,'student',5);
insert into tip(id_tip,nume_tip,reducere) values(5,'elev',5);

    DBMS_OUTPUT.PUT_LINE('Insert tipuri ok');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Eoare la insert tipuri: ' || SQLERRM);
END;


-------------------------------------------------------------CLIENTI----------------------------------------------------------
PROCEDURE insert_clienti IS
BEGIN
    DELETE FROM client;

insert into client(id_client,varsta,statut) values(1,15,'elev');
insert into client(id_client,varsta,statut) values(2,23,'adult');
insert into client(id_client,varsta,statut) values(3,65,'pensionar');
insert into client(id_client,varsta,statut) values(4,22,'student');
insert into client(id_client,varsta,statut) values(5,16,'adult');
insert into client(id_client,varsta,statut) values(6,19,'adult');

    DBMS_OUTPUT.PUT_LINE('Insert clienti ok');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Eoare la insert clienti: ' || SQLERRM);
END;


-------------------------------------------------------------COMBINATIE----------------------------------------------------------
PROCEDURE insert_combinatie(
    p_id_film IN NUMBER,
    p_id_sala IN NUMBER,
    p_data_ora_film IN DATE
) IS
BEGIN

    INSERT INTO combinatie (id_film, id_sala, data_ora_film, nr_locuri_libere)
    VALUES (
        p_id_film,
        p_id_sala,
        p_data_ora_film,
        (SELECT nr_locuri_totale FROM sala WHERE id_sala = p_id_sala)
    );
    DBMS_OUTPUT.PUT_LINE('Insert combinatie for film ID ' || p_id_film || ' and sala ID ' || p_id_sala);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inserting combinatie: ' || SQLERRM);
END;


-------------------------------------------------------------COMBINATII----------------------------------------------------------
    -- day hour minute second numtodsinterval(new_durata_ore, 'hour')
PROCEDURE insert_combinatii IS
    v_id_film NUMBER;
    v_id_sala NUMBER;
    v_data_ora_film DATE;
    v_minute NUMBER;
BEGIN
    delete from combinatie;
    -- Fast 9
    SELECT id_film INTO v_id_film FROM film WHERE nume_film = 'Fast 9';
    v_data_ora_film := TO_DATE('02-DEC-2022 10:00:00', 'DD-MON-YYYY HH24:MI:SS');
    insert_combinatie(v_id_film, 1, v_data_ora_film);
    
    SELECT d.nr_de_minute INTO v_minute FROM film f, detalii d WHERE f.nume_film = 'Fast 9' AND d.id_film = f.id_film;

    v_data_ora_film := TO_DATE('02-DEC-2022 10:10:00', 'DD-MON-YYYY HH24:MI:SS') + NUMTODSINTERVAL(v_minute, 'minute');
    insert_combinatie(v_id_film, 1, v_data_ora_film);

    -- Batman (2008)
    SELECT id_film INTO v_id_film FROM film WHERE nume_film = 'Batman' AND data_lansare LIKE '%08%';
    v_data_ora_film := TO_DATE('02-DEC-2022 10:00:00', 'DD-MON-YYYY HH24:MI:SS');

    insert_combinatie(v_id_film, 2, v_data_ora_film);

    -- Batman (1975)
    SELECT id_film INTO v_id_film FROM film WHERE nume_film = 'Batman' AND data_lansare LIKE '%75%';
    v_data_ora_film := TO_DATE('02-DEC-2022 10:00:00', 'DD-MON-YYYY HH24:MI:SS');
    insert_combinatie(v_id_film, 3, v_data_ora_film);

    -- The Notebook
    SELECT id_film INTO v_id_film FROM film WHERE nume_film = 'The Notebook';
    v_data_ora_film := TO_DATE('02-DEC-2022 10:00:00', 'DD-MON-YYYY HH24:MI:SS');
    insert_combinatie(v_id_film, 4, v_data_ora_film);

    SELECT d.nr_de_minute INTO v_minute FROM film f, detalii d WHERE f.nume_film = 'The Notebook' AND d.id_film = f.id_film;

    v_data_ora_film := TO_DATE('02-DEC-2022 10:10:00', 'DD-MON-YYYY HH24:MI:SS') + NUMTODSINTERVAL(v_minute, 'minute');
    insert_combinatie(v_id_film, 4, v_data_ora_film);

    -- Additional Insertions with Calculated Times
    v_data_ora_film := TO_DATE('03-DEC-2022 10:00:00', 'DD-MON-YYYY HH24:MI:SS') + NUMTODSINTERVAL(v_minute * 3, 'minute');
    insert_combinatie(v_id_film, 4, v_data_ora_film);

    v_data_ora_film := TO_DATE('04-DEC-2022 10:00:00', 'DD-MON-YYYY HH24:MI:SS') + NUMTODSINTERVAL(v_minute, 'minute');
    insert_combinatie(v_id_film, 4, v_data_ora_film);

    -- My own life
    SELECT id_film INTO v_id_film FROM film WHERE nume_film = 'My own life';
    v_data_ora_film := TO_DATE('02-DEC-2022 10:00:00', 'DD-MON-YYYY HH24:MI:SS');
    insert_combinatie(v_id_film, 5, v_data_ora_film);

    SELECT d.nr_de_minute INTO v_minute FROM film f, detalii d WHERE f.nume_film = 'My own life' AND d.id_film = f.id_film;

    v_data_ora_film := TO_DATE('03-DEC-2022 10:00:00', 'DD-MON-YYYY HH24:MI:SS') + NUMTODSINTERVAL(v_minute * 4, 'minute');
    insert_combinatie(v_id_film, 5, v_data_ora_film);

    v_data_ora_film := TO_DATE('04-DEC-2022 10:00:00', 'DD-MON-YYYY HH24:MI:SS') + NUMTODSINTERVAL(v_minute, 'minute');
    insert_combinatie(v_id_film, 5, v_data_ora_film);

    -- James Bond: Absolution
    SELECT id_film INTO v_id_film FROM film WHERE nume_film = 'James Bond: Absolution';
    v_data_ora_film := TO_DATE('02-DEC-2022 10:00:00', 'DD-MON-YYYY HH24:MI:SS');
    insert_combinatie(v_id_film, 6, v_data_ora_film);

    DBMS_OUTPUT.PUT_LINE('Populate combinatie successful');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error in populate combinatie: ' || SQLERRM);
END;
END inserts;
/

